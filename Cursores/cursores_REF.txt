En la base de datos de Oracle, un tipo REF CURSOR puede ser "fuertemente tipado" o "débilmente tipado":
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Un CURSOR REF "fuertemente tipado" se declara con una cláusula RETURN como en TYPE StrongCurType IS REF CURSOR RETURN emp%ROWTYPE;
Una variable REF CURSOR fuertemente tipada solo puede representar un conjunto de resultados que contenga datos que coincidan con el tipo con el que se declara su tipo REF CURSOR. 
El adaptador de base de datos de Oracle devuelve un conjunto de resultados fuertemente tipado para un CURSOR REF fuertemente tipado.

- Un CURSOR REF con "tipo débil" se declara sin una cláusula RETURN como en TYPE WeakCurType IS REF CURSOR;
Oracle también proporciona un tipo ESPECIAL REF CURSOR denominado SYS_REFCURSOR que se puede usar para declarar variables REF CURSOR ref con tipo débil. 
Las variables REF CURSOR con tipo débil pueden representar un conjunto de resultados que contiene cualquier tipo de datos de fila. 
El adaptador de base de datos de Oracle devuelve un conjunto de resultados débilmente tipado de registros genéricos para un CURSOR REF con tipo débil.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

¿Qué son las variables de cursor en PL/SQL?

En PL/SQL, una variable de cursor es una variable especial que se utiliza para almacenar una referencia a un cursor. 
A diferencia de otras variables que almacenan valores directamente, una variable de cursor no está vinculada a una consulta específica.

Una variable de cursor nos permite acceder al resultado de una consulta almacenada en un cursor y enviarlo entre programas PL/SQL sin tener que almacenar los datos en una variable y pasarla como argumento. 
Esto resulta especialmente útil cuando necesitamos compartir el resultado de una consulta en diferentes partes de una aplicación.
Las variables de cursor nos ofrecen una forma flexible de manipular y acceder a los datos del cursor. 
Podemos utilizarlas para iterar a través de los registros devueltos por la consulta, aplicar lógica adicional, realizar cálculos o enviar el resultado a otra parte del programa o incluso a otra aplicación.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Ejercicios: (Tipado Débil).

-- 1 (Ejemplo de uno como SYS_REFCURSOR)

create or replace function f_artistas_obras (v_id_artista artistas.artista_id%type)
return SYS_REFCURSOR

is
    v_ref sys_refcursor;
begin
open v_ref for select art.nombre, ob.titulo, ob.precio from artistas art inner join obras ob on ob.artista_id = art.artista_id
where ob.artista_id = v_id_artista;

return v_ref;
end;

-- Declaración de variable de tipo ref

var rc1 refcursor
exec :rc1:=f_artistas_obras(1);
print rc1;

-- 2 Buscar los títulos de las obras asociadas al nombre del artista indicado. Hacer uso de un procedimiento almacenado y cursor REF.
     Se indicará en el procedimiento almacenado el nombre del artista como parámetro de entrada (IN), y un parámetro de salida (OUT) de tipo "SYS_REFCURSOR". 
     Adicionalmente, habrá que indicar un parámetro de entrada que permita a los usuarios ordenadar los resultados por el título de la obra,
     de manera "Ascendente" o "Descendente", permitiendo que sean reconocidas las acortaciones "asc" o "ASC", o, "desc" o "DESC" e indicarlo en el resultado caso de aplicación.

create or replace procedure buscar_obras_artista (v_nombre_artista IN artistas.nombre%type, v_obras_artistas out SYS_REFCURSOR, v_ordenacion IN VARCHAR)
IS
v_cadena_nombre_validacion artistas.nombre%type;
v_cadena_ordenacion_formato VARCHAR(50);
BEGIN
 v_cadena_nombre_validacion := LOWER(REPLACE(v_nombre_artista, ' ', ''));
 
 IF v_ordenacion IS NOT NULL THEN
  v_cadena_ordenacion_formato := LOWER(v_ordenacion);
end if;
 
IF v_cadena_ordenacion_formato = 'ascendente' or v_cadena_ordenacion_formato = 'asc' THEN

Open v_obras_artistas for select art.nombre, ob.titulo from artistas art inner join obras ob on ob.artista_id = art.artista_id
where LOWER(REPLACE(art.nombre, ' ', '')) = v_cadena_nombre_validacion order by ob.titulo asc;

ELSIF v_cadena_ordenacion_formato = 'descendente' or v_cadena_ordenacion_formato = 'desc' THEN

Open v_obras_artistas for select art.nombre, ob.titulo from artistas art inner join obras ob on ob.artista_id = art.artista_id
where LOWER(REPLACE(art.nombre, ' ', '')) = v_cadena_nombre_validacion order by ob.titulo desc;

END IF;
END;


declare
    v_rc sys_refcursor;
    v_nombre_artista_entrada artistas.nombre%type;
    v_nombre_artista_result artistas.nombre%type;
    
    v_ordenacion_predeterminada BOOLEAN;
    v_ordenacion_ VARCHAR(50);
    
    v_num_resultados NUMBER := 0;
    v_titulo obras.titulo%type;
begin
    v_nombre_artista_entrada := 'pablopicasso';
    v_ordenacion_ := 'descendente';

    IF v_nombre_artista_entrada IS NULL THEN
     RAISE_APPLICATION_ERROR(-20010, 'No se introdujo el nombre de ningún artista' || v_nombre_artista_entrada);
    END IF;
    
    buscar_obras_artista (v_nombre_artista_entrada, v_rc, v_ordenacion_);
    

    loop
        fetch v_rc into v_nombre_artista_result, v_titulo;
        exit when v_rc%notfound;
        v_num_resultados := v_num_resultados + 1;
        dbms_output.put_line('Artista: ' || v_nombre_artista_result || ', Obra: ' || v_titulo);
    end loop;
    
    -- Se podría hacer más simple con "LOWER()" y reducir así la longitud de las expresiones y reducir las evaluaciones, 
    -- pero es un ejemplo didáctico de como se pueden usar varias combinaciones lógicas, 
    -- por lo que en un caso real sería innecesario enrevesarlo tanto, pero sí puede ser necesario en el contexto que indico:
    
    IF v_num_resultados = 0 THEN 
    dbms_output.put_line('No existe ninguna obra asociada al nombre del artista introducido');
    
    ELSIF ( v_ordenacion_ = 'DESCENDENTE' OR v_ordenacion_ = 'descendente') OR (v_ordenacion_ = 'desc' OR v_ordenacion_ = 'DESC') AND (v_num_resultados > 0) THEN
    dbms_output.put_line('');
    dbms_output.put_line('Total de resultados obtenidos: ' || v_num_resultados || ',' || ' Ordenación aplicada: Descendente.');
    
    IF v_ordenacion_ = 'desc' or v_ordenacion_ = 'DESC' THEN
    dbms_output.put_line('- Alias de ordenación: ' || v_ordenacion_ || '.');
    END IF;
   
    ELSIF ( v_ordenacion_ = 'ASCENDENTE' OR v_ordenacion_ = 'ascendente') OR (v_ordenacion_ = 'asc' OR v_ordenacion_ = 'ASC') AND (v_num_resultados > 0) THEN
    
    dbms_output.put_line('');
    dbms_output.put_line('Total de resultados obtenidos: ' || v_num_resultados || ',' || ' Ordenación aplicada: Ascendente.');
    
    IF v_ordenacion_ = 'asc' or v_ordenacion_ = 'ASC' THEN
    dbms_output.put_line('- Alias de ordenación: ' || v_ordenacion_ || '.');
    END IF;

    END IF;

    close v_rc;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);

end;
/

-- 3 Hacer uso de un procedimiento almacenado que tenga como parámetro de entrada el nombre del artista, parámetro de salida el cursor REF, como parámetro de entrada 
     y salida el nivel de detalle, varaible encargada tanto de recibir que nivel desea (nivel1, nivel2, nivel3) y formatear la cadena como de devolverla. 
     Dependiendo del nivel escogido, aplicará el cursor para unas columnas u otras:

   - Nivel 1: Mostrar Nombre del artista y título de la obra.
   - Nivel 2: Mostrar Nombre del artista y título de la obra, y su fecha de creación.
   - Nivel 2: Mostrar Nombre del artista y título de la obra, precio de la obra, y su descripción.

    Manejo libre de posibles errores, y lanzamiento de excepciones en consecuencia.

create or replace procedure detallar_informacion (v_nombre_artista IN artistas.nombre%type, v_resultado_ref out SYS_REFCURSOR, v_nivel_detalle IN OUT VARCHAR2)
IS
v_cadena_nombre_validacion artistas.nombre%type;
BEGIN

  IF v_nombre_artista IS NULL AND v_nivel_detalle IS NOT NULL THEN
  RAISE_APPLICATION_ERROR(-20010, 'Error, se introdujo un dato nulo para el artista.');
  
  ELSIF v_nombre_artista IS NOT NULL AND v_nivel_detalle IS NULL THEN
   RAISE_APPLICATION_ERROR(-20011, 'Error, se introdujo un dato nulo para el nivel de detalle.');
  
  ELSIF v_nombre_artista IS NULL AND v_nivel_detalle IS NULL THEN
   RAISE_APPLICATION_ERROR(-20012, 'Error, se introdujo valores nulos para el artista y el nivel de detalle.');
  
  ELSE
    v_cadena_nombre_validacion := LOWER(REPLACE(v_nombre_artista, ' ', ''));
    v_nivel_detalle := LOWER(REPLACE(v_nivel_detalle, ' ', ''));
END IF;


 CASE v_nivel_detalle
    WHEN 'nivel1' THEN 
          dbms_output.put_line('El nivel seleccionado es el Nivel 1:');
          dbms_output.put_line('');
          Open v_resultado_ref for select art.nombre, ob.titulo from artistas art inner join obras ob on ob.artista_id = art.artista_id
          where LOWER(REPLACE(art.nombre, ' ', '')) = v_cadena_nombre_validacion; 
                        
    WHEN 'nivel2' THEN 
          dbms_output.put_line('El nivel seleccionado es el Nivel 2:');
          dbms_output.put_line('');
          Open v_resultado_ref for select art.nombre, ob.titulo, ob.fecha_creacion from artistas art inner join obras ob on ob.artista_id = art.artista_id
          where LOWER(REPLACE(art.nombre, ' ', '')) = v_cadena_nombre_validacion; 
              
     WHEN 'nivel3' THEN
           dbms_output.put_line('El nivel seleccionado es el Nivel 3:');
           dbms_output.put_line('');
           Open v_resultado_ref for select art.nombre, ob.titulo, ob.precio, ob.descripcion from artistas art inner join obras ob on ob.artista_id = art.artista_id
           where LOWER(REPLACE(art.nombre, ' ', '')) = v_cadena_nombre_validacion; 
    ELSE 
        dbms_output.put_line('nivel de detalle especificado es inválido');
    END CASE;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
 
END;
/

declare
-- Variables de llamada:
v_rc sys_refcursor;
v_nombre artistas.nombre%type := '&nombre_artista';
v_nivel VARCHAR2(10) := '&nivel_detalle';

-- Variables del cursor: 
vc_nombre_artista_result artistas.nombre%type;
vc_titulo obras.titulo%type;
vc_fecha_creacion obras.fecha_creacion%type;
vc_precio_obra obras.precio%type;
vc_descripcion_obra obras.descripcion%type;

begin
detallar_informacion(v_nombre, v_rc, v_nivel);

 IF v_nivel = 'nivel1' THEN

     loop
     fetch v_rc into vc_nombre_artista_result, vc_titulo;
      exit when v_rc%notfound;
     dbms_output.put_line('Artista: ' || vc_nombre_artista_result || ', Obra: ' || vc_titulo);
      end loop;

  ELSIF  v_nivel = 'nivel2' THEN

      loop
      fetch v_rc into vc_nombre_artista_result, vc_titulo, vc_fecha_creacion;
      exit when v_rc%notfound;
      dbms_output.put_line('Artista: ' || vc_nombre_artista_result || ', Obra: ' || vc_titulo || ', Fecha de creación: ' || vc_fecha_creacion);
      end loop;

  ELSIF  v_nivel = 'nivel3' THEN  

     loop
     fetch v_rc into vc_nombre_artista_result, vc_titulo, vc_precio_obra, vc_descripcion_obra;
      exit when v_rc%notfound;
     dbms_output.put_line('Artista: ' || vc_nombre_artista_result || ', Obra: ' || vc_titulo || ' precio: ' || vc_precio_obra || ', y su descripción es: ' || vc_descripcion_obra);
     end loop;
     
     -- In

 END IF;
                    
    close v_rc;
end;
/

-- 4 Creación de un ejercicio que maneja múltiples Cursores REF en un mismo procedimiento.
--   Es un caso muy similar al ejercicio anterior, pero esta vez empleando el manejo de 2 cursores REF para tratar con la lógica de devolución de información según el nivel de detalle escogido:


create or replace procedure multples_cursores_ref 
(v_nombre_artista IN artistas.nombre%type, v_nivel_detalle IN OUT VARCHAR2, 
v_Obtener_obras_artista_ref out SYS_REFCURSOR, v_Obtener_exposiciones_obras_artista_ref out SYS_REFCURSOR)

IS
v_cadena_nombre_validacion artistas.nombre%type;
v_artista_id artistas.artista_id%type;
BEGIN

      IF v_nombre_artista IS NULL AND v_nivel_detalle IS NOT NULL THEN
      RAISE_APPLICATION_ERROR(-20010, 'Error, se introdujo un dato nulo para el artista.');
      
      ELSIF v_nombre_artista IS NOT NULL AND v_nivel_detalle IS NULL THEN
       RAISE_APPLICATION_ERROR(-20011, 'Error, se introdujo un dato nulo para el nivel de detalle.');
      
      ELSIF v_nombre_artista IS NULL AND v_nivel_detalle IS NULL THEN
       RAISE_APPLICATION_ERROR(-20012, 'Error, se introdujo valores nulos para el artista y el nivel de detalle.');
      
      ELSE
        v_cadena_nombre_validacion := LOWER(REPLACE(v_nombre_artista, ' ', ''));
        v_nivel_detalle := LOWER(REPLACE(v_nivel_detalle, ' ', ''));
        
        -- He decidido esta vez obtener el id_artista a partir de la comparación con 'v_cadena_nombre_validacion' 
        -- para evitar expresar esta condición más de una vez, y simplificar la de los cursores.
        
        select artista_id into v_artista_id from artistas art where LOWER(REPLACE(art.nombre, ' ', '')) = v_cadena_nombre_validacion;
        
    END IF;


     CASE v_nivel_detalle
        WHEN 'nivel1' THEN 
              dbms_output.put_line('El nivel seleccionado es el Nivel 1 (Apertura del primer cursor):');
              dbms_output.put_line('');
              
              Open v_Obtener_obras_artista_ref for select  ob.fecha_creacion , ob.titulo
              from artistas art inner join obras ob on ob.artista_id = art.artista_id
              where ob.artista_id = v_artista_id;
                            
        WHEN 'nivel2' THEN 
              dbms_output.put_line('El nivel seleccionado es el Nivel 2 (Apertura del primer y segundo cursor):');
              dbms_output.put_line('');
              
              Open v_Obtener_obras_artista_ref for select ob.fecha_creacion , ob.titulo
              from artistas art inner join obras ob on ob.artista_id = art.artista_id
              where ob.artista_id = v_artista_id;
              
              Open v_Obtener_exposiciones_obras_artista_ref for select expo.ubicacion, expo.fecha_inicio, expo.fecha_fin, expo.nombre from obras ob 
              inner join exposicion_obras expob on expob.obra_id = ob.obra_id
              inner join exposiciones expo on expo.exposicion_id = expob.exposicion_id
              where ob.artista_id = v_artista_id;
                  
         WHEN 'nivel3' THEN
               dbms_output.put_line('El nivel seleccionado es el Nivel 3: (Apertura del segundo cursor con mayor detalle)');
               dbms_output.put_line('');
               
              Open v_Obtener_exposiciones_obras_artista_ref 
              for select art.nombre, expo.ubicacion, expo.fecha_inicio, expo.fecha_fin, expo.nombre, ob.titulo, ob.descripcion 
              from obras ob 
              inner join artistas art on art.artista_id = ob.artista_id
              inner join exposicion_obras expob on expob.obra_id = ob.obra_id
              inner join exposiciones expo on expo.exposicion_id = expob.exposicion_id
              where ob.artista_id = v_artista_id;    
        ELSE 
            dbms_output.put_line('nivel de detalle especificado es inválido');
        END CASE;
END;
/
 
 DECLARE
 
 -- Declaración de variables de llamada:
 
v_obtener_obras_artista_rc sys_refcursor;
v_obtener_exposiciones_obras_artista_rc sys_refcursor;
v_nombre artistas.nombre%type := '&nombre_artista';
v_nivel VARCHAR2(10) := '&nivel_detalle';

-- Declaración de variables del Cursor 1:
vc_fecha_creacion obras.fecha_creacion%type;
vc_titulo obras.titulo%type;

-- Declaración de variables del Cursor 2:

v_expo_ubicacion_rc exposiciones.ubicacion%type;
v_expo_fecha_inicio_rc exposiciones.fecha_inicio%type;
v_expo_fecha_fin_rc exposiciones.fecha_fin%type;
v_expo_nombre_rc  exposiciones.nombre%type;

v_artista_nombre_rc artistas.nombre%type;
v_obras_descripcion_rc  obras.descripcion%type; 


 BEGIN
 
 multples_cursores_ref(v_nombre, v_nivel, v_obtener_obras_artista_rc, v_obtener_exposiciones_obras_artista_rc);
 
      IF v_nivel = 'nivel1' THEN
         dbms_output.put_line('# SOBRE LA OBRA #');
         loop
         fetch v_obtener_obras_artista_rc into vc_fecha_creacion, vc_titulo;
          exit when v_obtener_obras_artista_rc%notfound;
          dbms_output.put_line('------------------------------------------------------');
          dbms_output.put_line('Título de la Obra: ' || vc_titulo );
          dbms_output.put_line('Fecha de Creación de la Obra: ' || vc_fecha_creacion );
          dbms_output.put_line('------------------------------------------------------');
          end loop;
       
         
      ELSIF  v_nivel = 'nivel2' THEN
      
          dbms_output.put_line('# SOBRE LA OBRA #');
          loop
          fetch v_obtener_obras_artista_rc into vc_fecha_creacion, vc_titulo;
          exit when v_obtener_obras_artista_rc%notfound;
          dbms_output.put_line('------------------------------------------------------');
          dbms_output.put_line('Título de la Obra: ' || vc_titulo );
          dbms_output.put_line('Fecha de Creación de la Obra: ' || vc_fecha_creacion );
          dbms_output.put_line('------------------------------------------------------');
          end loop;

         dbms_output.put_line('');
         dbms_output.put_line('# SOBRE LA EXPOSICIÓN #');
         
          loop
          fetch v_obtener_exposiciones_obras_artista_rc into v_expo_ubicacion_rc, v_expo_fecha_inicio_rc, v_expo_fecha_fin_rc, v_expo_nombre_rc;
          exit when v_obtener_exposiciones_obras_artista_rc%notfound;
          dbms_output.put_line('------------------------------------------------------');
          dbms_output.put_line('Ubicación de la Exposición: ' || v_expo_ubicacion_rc);
          dbms_output.put_line('Fecha de Inicio de la Exposición: ' || v_expo_fecha_inicio_rc);
          dbms_output.put_line('Fecha de Fin de la Exposición: ' || v_expo_fecha_fin_rc);
          dbms_output.put_line('Nombre de la Exposición: ' || v_expo_nombre_rc);
          dbms_output.put_line('------------------------------------------------------');
          end loop;
       
         dbms_output.put_line('');
         
      ELSIF v_nivel = 'nivel3' THEN  
         dbms_output.put_line('# SOBRE EL ARTISTA, LA OBRA Y LA EXPOSICIÓN #');
         loop
          fetch v_obtener_exposiciones_obras_artista_rc into v_artista_nombre_rc, v_expo_ubicacion_rc, v_expo_fecha_inicio_rc, v_expo_fecha_fin_rc, v_expo_nombre_rc, vc_titulo, v_obras_descripcion_rc;
          exit when v_obtener_exposiciones_obras_artista_rc%notfound;
          dbms_output.put_line('------------------------------------------------------');
          dbms_output.put_line('El nombre del Artista es: ' || v_artista_nombre_rc);
          dbms_output.put_line('Ubicación de la Exposición: ' || v_expo_ubicacion_rc);
          dbms_output.put_line('Fecha de Inicio de la Exposición: ' || v_expo_fecha_inicio_rc);
          dbms_output.put_line('Fecha de Fin de la Exposición: ' || v_expo_fecha_fin_rc);
          dbms_output.put_line('Nombre de la Exposición: ' || v_expo_nombre_rc);
          dbms_output.put_line('La Descripción de la Obra es: ' || v_obras_descripcion_rc);
          dbms_output.put_line('------------------------------------------------------');
          end loop;
      
     END IF;
                    
    -- Cerrar los cursores solo si están abiertos (Evita el error: ORA-01001):
    
    IF v_obtener_obras_artista_rc%ISOPEN THEN
        CLOSE v_obtener_obras_artista_rc;
    END IF;

    IF v_obtener_exposiciones_obras_artista_rc%ISOPEN THEN
        CLOSE v_obtener_exposiciones_obras_artista_rc;
    END IF;
 
 END;

-- Ejercicios: (Tipado Fuerte).




